version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: crq-db
    environment:
      POSTGRES_DB: code_review_quest
      POSTGRES_USER: crq_user
      POSTGRES_PASSWORD: crq_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crq_user -d code_review_quest"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: crq-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crq-backend
    environment:
      - DATABASE_URL=postgresql://crq_user:crq_password@db:5432/code_review_quest
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./problems:/app/problems
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Code Analysis Worker
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: crq-worker
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://crq_user:crq_password@db:5432/code_review_quest
    volumes:
      - ./worker:/app
      - ./problems:/app/problems
    depends_on:
      - redis
      - db
    command: python entrypoint.py

  # Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: crq-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev

  # Nginx (Reverse Proxy for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: crq-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: crq-network
